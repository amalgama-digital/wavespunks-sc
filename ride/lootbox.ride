{-# STDLIB_VERSION 5 #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# CONTENT_TYPE DAPP #-}

let artefactsLimit = 750

let statusDrop = "DROPED"

#time strat sale
let timeStart = "Time Start Drop" 

#time stop sale
let timeEnd = "Time End Drop"

let artefacts = ["SALE-DISCOUNT", 
                "MERCH-TSHIRT",
                "MERCH-HOODIE",
                "MERCH-CAP",
                "VAC-ASTROZOMBIKA",
                "VAC-ZOMBIKV",
                "VAC-ZOMBERNA",
                "ART-RESPIRATORS",
                "ART-GASMASK",
                "ART-HAZMATSUIT",
                "ART-CROWBAR",
                "ART-MACHETE",
                "ART-FLAMETHROWER",
                "ART-SHOTGUN",
                "ART-PICKLEDBRAIN"
                ]

func tryGetInteger (key: String) = {
    let val = match getInteger(this, key) {
        case a: Int => 
            a
        case _ => 
            0
    }
    val
}

func tryGetString (key: String) = {
    let val = match (getString(key)) {
        case t: String => t 
        case _ => ""
      }
    val
}

func keyStatus (address: String) = {
    address + "_status"
}

func keyFinishHeight (address: String) = {
    address + "_finishHeight"
}

func keyTransaction (address: String) = {
    address + "_idTransaction"
}

func getRandomNumber (variants: Int, txId: ByteVector, finishHeight: Int, offset: Int) = {
    let randomSeedBlock = value(blockInfoByHeight((finishHeight - 1)))
    let randomHash = sha256((txId + value(randomSeedBlock.vrf)))
    (toInt(randomHash, (offset * 8)) % variants)
}

func getRandomArtefact (boxId: ByteVector, h: Int) = {
    let randomNumber = getRandomNumber(15, boxId, h, 0)
    artefacts[randomNumber]
}

@Callable(i)
func initTime ( start: Int, end: Int ) = {
    if(i.caller == this)
    then
        [
            IntegerEntry(timeStart, start),
            IntegerEntry(timeEnd, end)
        ]
    else throw("Only Admin")
}

@Callable(i)
func dropLootbox (address: String) = {

    let userStatusKey = keyStatus(address) 
    if( lastBlock.timestamp > getIntegerValue(timeEnd) )
    then throw("Drop ended... ")
    else if((lastBlock.timestamp < getIntegerValue(timeStart)))
        then throw("Drop wasn`t start... ")
        else if(i.caller != this)
            then throw("Only admin")
            else if ((tryGetInteger("count_lootbox") >= artefactsLimit))
                then throw("Lootboxs were ended")
                else if(tryGetString(userStatusKey) != "")
                    then throw("Only one lootbox for user")
                    else {
                        [
                            StringEntry(userStatusKey, statusDrop),
                            StringEntry(keyTransaction(address), toBase58String(i.transactionId)),
                            IntegerEntry(keyFinishHeight(address), height + 2),
                            IntegerEntry("count_lootbox", (tryGetInteger("count_lootbox") + 1))
                        ]
                    }
}

@Callable(i)
func setGlobalArtAmount (newAmount: Int) = {
    if (i.caller == this)
    then 
    [
    IntegerEntry("count_lootbox", newAmount)
    ]
    else throw("Only admin")
}


@Callable(i)
func claimLootbox () = {
    let txId = tryGetString(keyTransaction(toString(i.caller)))
    let statusKey = keyStatus(toString(i.caller))
    let heightKey = keyFinishHeight(toString(i.caller))
    if((lastBlock.timestamp < getIntegerValue(timeEnd)))
    then throw("You cannot claim yet")
    else if ((tryGetString(statusKey) != statusDrop))
        then throw("You don`t have lootbox")
        else if ((getIntegerValue(heightKey) > height))
            then throw("You cannot claim yet")
            else {
                let artType = getRandomArtefact(fromBase58String(txId), getIntegerValue(heightKey))
                let asset = Issue(artType, "Waves Punk metaverse", 1, 0, false, unit, getIntegerValue(heightKey))
                let assetId = calculateAssetId(asset)
                [
                StringEntry(statusKey, artType),
                StringEntry((toString(i.caller) + "_assetId"), toBase58String(assetId)),
                StringEntry((toBase58String(assetId) + "_type"), artType), 
                asset,
                ScriptTransfer(i.caller, 1, assetId)
                ]
                }
}


@Verifier(tx)
func verify () = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)