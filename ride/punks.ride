{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let maxSupply = 1337
let waves = 100000000

func getPunkIDKey(id: String) = {
  "punk_" + id
}

func tryGetInteger(key: String) = {
  let val = match getInteger(this, key) {
    case b:Int => b
    case _ => 0
  }
  val
}


func tryGetString(key: String) = {
  let val = match getString(this, key) {
    case b:String => b
    case _ => ""
  }
  val
}

func tryGetAddress(addr: String) = {
  let val = match addressFromString(addr) {
    case a:Address => a
    case a:Unit => this
  }
  val
}

func getRandomNumber(variants: Int, txId: ByteVector, heightBlock: Int, offset: Int) = {
  let randomSeedBlock = blockInfoByHeight(heightBlock-1).value()
  let randomHash = sha256_16Kb(txId + randomSeedBlock.vrf.value())
  randomHash.toInt(offset) % variants
}

func calcWavesNeeded(totalPunksSupply: Int) = {
  if (totalPunksSupply >= 1300) then {
    waves * 20
  } else {
    ((totalPunksSupply / 100) + 1) * waves
  }
}

@Callable(i)
func mint(ref: String) = {
  let totalPunksSupply = tryGetInteger("punks_supply")
  let availablePunks = tryGetString("available_punks")

  let wavesNeeded = calcWavesNeeded(totalPunksSupply)

  let firstPayment = i.payments[0].value()

  let firstPaymentBool = match (firstPayment.assetId) {
    case t:ByteVector => true
    case w:Unit => false
  }

  if (totalPunksSupply == maxSupply) then {
    throw("All punks are minted")
  } else if (availablePunks == "") then {
    throw("No punks available")
  } else if (firstPaymentBool) then {
    throw("Payment must be in Waves tokens only")
  } else if (firstPayment.amount < wavesNeeded) then {
    throw("Insufficient funds")
  } else {
    let listAvailablePunks = split(availablePunks, ",")

    let rand = getRandomNumber(totalPunksSupply, i.transactionId, height, 0)
    let punkId = getElement(listAvailablePunks, rand)

    let name = "WavesPunk #" + punkId

    let asset = Issue(name, name, 1, 0, false, unit, height)
    let assetId = asset.calculateAssetId()

    let referalAddress = tryGetAddress(ref)
    [
      IntegerEntry("punks_supply", totalPunksSupply + 1),
      StringEntry("available_punks", makeString(removeByIndex(listAvailablePunks, rand), ",")),
      asset,
      StringEntry(getPunkIDKey(punkId), assetId.toBase58String()),
      StringEntry(assetId.toBase58String(), getPunkIDKey(punkId)),
      ScriptTransfer(i.caller, 1, assetId),
      ScriptTransfer(referalAddress, firstPayment.amount / 10, unit)
    ]
  }
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
