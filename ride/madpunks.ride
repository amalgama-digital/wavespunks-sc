{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let maxSupply = 3000
let waves = 500000000

func getPunkIDKey(id: String) = {
  "punk_" + id
}

func getReqIDKey(id: String) = {
  "req_" + id
}

func tryGetInteger(key: String) = {
  let val = match getInteger(this, key) {
    case b:Int => b
    case _ => 0
  }
  val
}

func tryGetString(key: String) = {
  let val = match getString(this, key) {
    case b:String => b
    case _ => ""
  }
  val
}

func tryGetAddress(addr: String) = {
  let val = match addressFromString(addr) {
    case a:Address => a
    case a:Unit => Address(base58'3Msrw9Kxa6RgHYQ63sSib9uESmaBU9gH6Gy')
    # case a:Unit => Address(base58'3PQG1wqM5vECAGVzMDvBzyq5nSkriqnVFxs')
  }
  val
}

func getTypePunk(id: String) = {
  let idINT = match parseInt(id) {
    case i:Int => i
    case i:Unit => 0
  }

  if (idINT == 0) then {
    "ultra-rare"
  } else if (idINT <= 41) then {
    "rare"
  } else {
    "unique"
  }
}

@Callable(i)
func request() = {
  let totalPunksSupply = tryGetInteger("punks_supply")

  let wavesNeeded = waves

  let firstPayment = i.payments[0].value()

  let firstPaymentBool = match (firstPayment.assetId) {
    case t:ByteVector => true
    case w:Unit => false
  }

  if (totalPunksSupply == maxSupply) then {
    throw("All punks are minted")
  } else if (firstPaymentBool) then {
    throw("Payment must be in Waves tokens only")
  } else if (firstPayment.amount < wavesNeeded) then {
    throw("Insufficient funds")
  } else {
    [
      IntegerEntry("punks_supply", totalPunksSupply + 1),
      StringEntry(getReqIDKey(toString(totalPunksSupply)), toString(i.caller))
    ]
  }
}

@Callable(i)
func mint(req: String, punkId: String, url: String) = {
  let reqAddress = tryGetString(req)

  let punk = tryGetString(getPunkIDKey(punkId))

  if (punk != "") then {
    throw("Punk was already minted")
  } else if (reqAddress == "") then {
    throw("No such request")
  } else if (toString(i.caller) != "3Msrw9Kxa6RgHYQ63sSib9uESmaBU9gH6Gy") then {
    throw("The function is available only to the admin")
  } else {

    let name = "MadPunk #" + punkId
    let meta = "{\"id\": " + punkId + ", \"type\": \"" + getTypePunk(punkId) + "\", \"url\": \"" + url + "\"}"

    let asset = Issue(name, meta, 1, 0, false, unit, height)
    let assetId = asset.calculateAssetId()

    [
      DeleteEntry(req),
      asset,
      StringEntry(getPunkIDKey(punkId), assetId.toBase58String()),
      StringEntry(assetId.toBase58String(), getPunkIDKey(punkId)),
      ScriptTransfer(tryGetAddress(reqAddress), 1, assetId)
    ]
  }
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
