{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let maxSupply = 1000
let waves = 100000000

func getPunkIDKey(id: String) = {
  "punk_" + id
}

func tryGetInteger(key: String) = {
  let val = match getInteger(this, key) {
    case b:Int => b
    case _ => 0
  }
  val
}

func tryGetString(key: String) = {
  let val = match getString(this, key) {
    case b:String => b
    case _ => ""
  }
  val
}

func getURL(id: String) = {
  if(containsElement(split(tryGetString("gif_punk"), ","), id)) then {
    "https://mypunks.wavespunks.com/mad/m" + id + ".gif"
  } else {
    "https://mypunks.wavespunks.com/mad/m" + id + ".png"

  }
}

func getTypePunk(id: String) = {
  let idINT = match parseInt(id) {
    case i:Int => i
    case i:Unit => 0
  }
  if(containsElement(split(tryGetString("gif_punk"), ","), toString(idINT))) then {
    "ultra-rare"
  } else if (idINT <= 29) then {
    "rare"
  } else {
    "unique"
  }
}

func getRandomNumber(variants: Int, txId: ByteVector, heightBlock: Int, offset: Int) = {
  let randomSeedBlock = blockInfoByHeight(heightBlock-1).value()
  let randomHash = sha256_16Kb(txId + randomSeedBlock.vrf.value())
  randomHash.toInt(offset) % variants
}

func calcWavesNeeded() = {
  waves * 6
}

func _mint(i: Invocation, totalPunksSupply: Int, availablePunks: String) = {
  let listAvailablePunks = split(availablePunks, ",")

  let rand = getRandomNumber(maxSupply - totalPunksSupply, i.transactionId, height, 0)
  let punkId = getElement(listAvailablePunks, rand)

  let name = "MadPunk #" + punkId
  let meta = tryGetString("collection_description");

  let asset = Issue(name, meta, 1, 0, false, unit, height)
  let assetId = asset.calculateAssetId()
  let tx = [
      IntegerEntry("punks_supply", totalPunksSupply + 1),
      StringEntry("available_punks", makeString(removeByIndex(listAvailablePunks, rand), ",")),
      asset,
      StringEntry(getPunkIDKey(punkId), assetId.toBase58String()),
      StringEntry(assetId.toBase58String() + "_id", getPunkIDKey(punkId)),
      StringEntry(assetId.toBase58String() + "_type", getTypePunk(punkId)),
      StringEntry(assetId.toBase58String() + "_url", getURL(punkId)),
      StringEntry(assetId.toBase58String() + "_fraction", tryGetString("fraction")),
      ScriptTransfer(i.caller, 1, assetId)
    ]
  tx
}

@Callable(i)
func mint() = {
  let totalPunksSupply = tryGetInteger("punks_supply")
  let availablePunks = tryGetString("available_punks")
  let preMintAddress = split(tryGetString("premint_address"), ",")
  let startMint = tryGetInteger("start_mint")
  let wavesNeeded = calcWavesNeeded()

  let firstPayment = i.payments[0].value()

  let firstPaymentBool = match (firstPayment.assetId) {
    case t:ByteVector => true
    case w:Unit => false
  }
  
  if (totalPunksSupply == maxSupply) then {
    throw("All punks are minted")
  } else if (availablePunks == "") then {
    throw("No punks available")
  } else if(containsElement(preMintAddress, toString(i.caller))) then {
    let index = match (indexOf(preMintAddress, toString(i.caller))) {
      case b:Int => b
      case b:Unit => 0
    }
    let temp = _mint(i, totalPunksSupply, availablePunks) ++ [StringEntry("premint_address", makeString(removeByIndex(preMintAddress, index), ","))]
    temp
  } else if(lastBlock.timestamp < startMint) then {
    throw("Mint hasn`t yet begun")
  } else if (firstPaymentBool) then {
    throw("Payment must be in Waves tokens only")
  } else if (firstPayment.amount < wavesNeeded) then {
    throw("Insufficient funds")
  } else {
    _mint(i, totalPunksSupply, availablePunks)
  }
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
